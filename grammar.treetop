# vim: ft=treetop
grammar RbLisp
  rule program
    expression more_expressions:("\n" space expression)* <Program>
  end

  rule expression
    space? '(' body ')' space? <Expression>
  end

  rule function_call
    '(' space? name:identifier space? parameters? space? ')' <FunctionCall>
  end

  rule body
    (expression / define / function_call / function / add / mul / literal / space )* <Body>
  end

  rule define
    "define" space? identifier space? definition:literal <Define>
  end

  rule parameters
    '(' space? parameters:(space? (identifier / literal) space?)* ')'
  end

  rule function
    "function" space? parameters space? expression <Function>
  end

  rule literal
    (identifier / float / integer / string)
  end

  rule add
    "+" space? car:(expression / literal) space? cdr:(expression / literal) <Add>
  end

  rule mul
    "*" space? car:(expression / literal) space? cdr:(expression / literal) <Mul>
  end

  rule integer
    ('+' / '-')? [0-9]+ <IntegerLiteral>
  end

  rule float
    ('+' / '-')? [0-9]+ (('.' [0-9]+) / ('e' [0-9]+)) <FloatLiteral>
  end

  rule string
    '"' ([^"\\] / "\\" . )* '"' <StringLiteral>
  end

  rule identifier
    [a-zA-Z\=\*] [a-zA-Z0-9_\=\*]* <Identifier>
  end

  rule space
    [\s]+
  end
end
